actions:
  cloudwatch:
    - "[Create an alarm](./cw-ruby-example-create-alarm.rb) (`CreateAlarm`)"
    - "[Show alarms](./cw-ruby-example-show-alarms.rb) (`DescribeAlarms`)"
    - "[Disable alarm actions](./cw-ruby-example-alarm-actions.rb) (`DisableAlarmActions`)"
  cloudtrail:
    - "[Create a trail](./create_trail.rb) (`CreateTrail`)"
    - "[Delete a trail](./delete_trail.rb) (`DeleteTrail`)"
    - "[Describe trails](./describe_trails.rb) (`DescribeTrails`)"
    - "[Lookup events](./lookup_events.rb) (`LookupEvents`)"
  codebuild:
    - "[Build a project](./aws-ruby-sdk-codebuild-example-build-project.rb) (`CreateProject`)"
    - "[List builds](./aws-ruby-sdk-codebuild-example-list-builds.rb) (`ListBuilds`)"
    - "[List projects](./aws-ruby-sdk-codebuild-example-list-projects.rb) (`ListProjects`)"
  dynamodb:
    - "[Create a table](scenario_getting_started_movies.rb) (`CreateTable`)"
    - "[Delete a table](scenario_getting_started_movies.rb) (`DeleteTable`)"
    - "[Delete an item from a table](scenario_getting_started_movies.rb) (`DeleteItem`)"
    - "[Get an item from a table](scenario_getting_started_movies.rb) (`GetItem`)"
    - "[Get information about a table](scenario_getting_started_movies.rb) (`DescribeTable`)"
    - "[Put an item in a table](scenario_getting_started_movies.rb) (`PutItem`)"
    - "[Query a table](scenario_getting_started_movies.rb) (`Query`)"
    - "[Scan a table](scenario_getting_started_movies.rb) (`Scan`)"
    - "[Update an item in a table](scenario_getting_started_movies.rb) (`UpdateItem`)"
    - "[Write a batch of items](scenario_getting_started_movies.rb) (`BatchWriteItem`)"
  ec2:
    - "[Create an instance](./ec2-ruby-example-create-instance.rb) (`CreateInstance`)"
    - "[Create a key pair](./ec2-ruby-example-create-key-pair.rb) (`CreateKeyPair`)"
    - "[Create a route table](./ec2-ruby-example-create-route-table.rb) (`CreateRouteTable`)"
    - "[Create a security group](./ec2-ruby-example-create-security-group.rb) (`CreateSecurityGroup`)"
    - "[Create a subnet](./ec2-ruby-example-create-subnet.rb) (`CreateSubnet`)"
    - "[Create a VPC](./ec2-ruby-example-create-vpc.rb) (`CreateVPC`)"
    - "[Get instance information by tag](./ec2-ruby-example-get-instance-info-by-tag.rb) (`DescribeInstances`)"
    - "[List instance state](./ec2-ruby-example-list-state-instance-i-123abc.rb) (`DescribeInstances`)"
    - "[Reboot an instance](./ec2-ruby-example-reboot-instance-i-123abc.rb) (`RebootInstance`)"
    - "[Display list of available AWS Regions](./ec2-ruby-example-regions-availability-zones.rb) (`DescribeRegions`)"
    - "[Start an instance](./ec2-ruby-example-start-instance-i-123abc.rb) (`StarInstance`)"
    - "[Stop an instance](./ec2-ruby-example-stop-instance-i-123abc.rb) (`StopInstance`)"
    - "[Terminate an instance](./ec2-ruby-example-terminate-instance-i-123abc.rb) (`TerminateInstance`)"
  elasticbeanstalk:
    - "[List stacks](./eb_list_stacks.rb) (`ListAvailableSolutionStacks`)"
    - "[List all apps](./elb-ruby-example-list-all-apps.rb) (`DescribeApplications, DescribeEnvironments`)"
    - "[List details of an app](./elb-ruby-example-list-name-description-url-myrailsapp.rb) (`DescribeApplications`)"
    - "[Update an app](./elb-ruby-example-update-myrailsapp.rb) (`UpdateApplication`)"
  elastictranscoder:
    - "[Create a job](./create_job.rb) (`CreateJob`)"
  iam:
    - "[Attach a policy to a role](scenario_create_user_assume_role.rb) (`AttachRolePolicy`)"
    - "[Create a policy](scenario_create_user_assume_role.rb) (`CreatePolicy`)"
    - "[Create a role](scenario_create_user_assume_role.rb) (`CreateRole`)"
    - "[Create a service-linked role](iam_wrapper.rb) (`CreateServiceLinkedRole`)"
    - "[Create a user](scenario_create_user_assume_role.rb) (`CreateUser`)"
    - "[Create an access key](scenario_create_user_assume_role.rb) (`CreateAccessKey`)"
    - "[Create an inline policy for a user](scenario_create_user_assume_role.rb) (`CreateUser`)"
    - "[Delete a policy](scenario_create_user_assume_role.rb) (`DeletePolicy`)"
    - "[Delete a role](scenario_create_user_assume_role.rb) (`DeleteRole`)"
    - "[Delete a service-linked role](iam_wrapper.rb) (`DeleteRole`)"
    - "[Delete a user](scenario_create_user_assume_role.rb) (`DeleteUser`)"
    - "[Delete an access key](scenario_create_user_assume_role.rb) (`DeleteAccessKey`)"
    - "[Delete an inline policy from a user](scenario_create_user_assume_role.rb) (`DeletePolicy`)"
    - "[Detach a policy from a role](scenario_create_user_assume_role.rb) (`DetachRolePolicy`)"
    - "[Get a policy](iam_wrapper.rb) (`GetPolicy`)"
    - "[Get a role](iam_wrapper.rb) (`GetRole`)"
    - "[Get the account password policy](iam_wrapper.rb) (`GetAccountPasswordPolicy`)"
    - "[List SAML providers](iam_wrapper.rb) (`ListSAMLProviders`)"
    - "[List a user's access keys](scenario_create_user_assume_role.rb) (`ListAccessKeys`)"
    - "[List groups](iam_wrapper.rb) (`ListGroups`)"
    - "[List policies](iam_wrapper.rb) (`ListPolicies`)"
    - "[List policies attached to a role](scenario_create_user_assume_role.rb) (`ListAttachedRolePolicies`)"
    - "[List roles](iam_wrapper.rb) (`ListRoles`)"
    - "[List users](iam_wrapper.rb) (`ListUsers`)"
  kms:
    - "[Create a key](./create_key.rb) (`CreateKey`)"
    - "[Decrypt a blob](./decrypt_data.rb) (`Decrypt`)"
    - "[Encrypt data](./encrypt_data.rb) (`Encrypt`)"
    - "[Re-encrypt data](./re_encrypt_data.rb) (`ReEncrypt`)"
  lambda:
    - "[Create a function](lambda_basics.rb) (`CreateFunction`)"
    - "[Delete a function](lambda_basics.rb) (`DeleteFunction`)"
    - "[Get a function](lambda_basics.rb) (`GetFunction`)"
    - "[Invoke a function](lambda_basics.rb) (`Invoke`)"
    - "[List functions](lambda_basics.rb) (`ListFunctions`)"
    - "[Update function code](lambda_basics.rb) (`UpdateFunctionCode`)"
    - "[Update function configuration](lambda_basics.rb) (`UpdateFunctionConfiguration`)"
  polly:
    - "[Describe voices](./polly_describe_voices.rb) (`DescribeVoices`)"
    - "[List lexicons](./polly_list_lexicons.rb) (`ListLexicons`)"
    - "[Synthesize speech](./polly_synthesize_speech.rb) (`SynthesizeSpeech`)"
  rds:
    - "[Create a cluster snapshot](./create_cluster_snapshot.rb) (`CreateDbClusterSnapshot`)"
    - "[Create a snapshot](./create_snapshot.rb) (`CreateDbSnapshot`)"
    - "[List all instances](./list_instances.rb) (`DescribeDBInstances`)"
    - "[List a cluster's snapshots](./list_cluster_snapshots.rb) (`DescribeDbClusterSnapshots`)"
    - "[List instance snapshots](./list_instance_snapshots.rb) (`DescribeDbSnapshots`)"
    - "[List parameter groups](./list_parameter_groups.rb) (`DescribeDbParameterGroups`)"
    - "[List subnet groups](./list_security_groups.rb) (`GetDbClusterParameters`)"
    - "[List security groups](./list_subnet_groups.rb) (`GetDbClusterParameters`)"
  s3:
    - "[Add CORS rules to a bucket](bucket_cors.rb) (`PutBucketCors`)"
    - "[Add a policy to a bucket](bucket_policy.rb) (`PutBucketPolicy`)"
    - "[Copy an object from one bucket to another](object_copy.rb) (`CopyObject`)"
    - "[Copy an object from one bucket to another and add encryption](object_copy_encrypt.rb) (`CopyObject`)"
    - "[Create a bucket](bucket_create.rb) (`CreateBucket`)"
    - "[Delete an empty bucket](scenario_getting_started.rb) (`DeleteBucket`)"
    - "[Delete CORS rules from a bucket](bucket_cors.rb) (`DeleteBucketCors`)"
    - "[Delete a policy from a bucket](bucket_policy.rb) (`DeleteBucketPolicy`)"
    - "[Delete multiple objects](scenario_getting_started.rb) (`DeleteObjects`)"
    - "[Determine the existence and content type of an object](object_exists.rb) (`ListObjects`)"
    - "[Get an object from a bucket](object_get.rb) (`GetObject`)"
    - "[Get an object from a bucket and report its server-side encryption state](object_get_encryption.rb) (`GetObject`)"
    - "[Get CORS rules for a bucket](bucket_cors.rb) (`GetBucketCors`)"
    - "[Get the policy for a bucket](bucket_policy.rb) (`GetBucketPolicy`)"
    - "[List buckets](bucket_list.rb) (`ListBuckets`)"
    - "[List objects in a bucket](bucket_list_objects.rb) (`ListObjects`)"
    - "[Set the website configuration for a bucket](bucket_put_website.rb) (`PutBucketWebsite`)"
    - "[Set server-side encryption for a bucket](bucket_put_encryption.rb) (`PutBucketEncryption`)"
    - "[Upload an object to a bucket using Object.put](object_put.rb) (`PutObject`)"
    - "[Upload an object to a bucket using Object.put and add server-side encryption](object_put_sse.rb) (`PutObject`)"
    - "[Upload an object to a bucket using Object.upload_file](object_put.rb) (`PutObject`)"
  secretsmanager:
    - "[Get all secrets in an AWS Region](./sm_get_secrets.rb) (`ListSecrets`)"
  ses:
    - "[Get statistics](./ses_get_statistics.rb) (`GetSendStatistics`)"
    - "[List emails](./ses_list_emails.rb) (`ListTemplates`)"
    - "[Send an email](./ses_send_email.rb) (`SendEmail`)"
    - "[Send a verification](./ses_send_verification.rb) (`VerifyEmailIdentity`)"
  sns:
    - "[Create a subscription](./sns-ruby-example-create-subscription.rb) (`CreateSubscription`)"
    - "[Create a topic](./sns-ruby-example-create-topic.rb) (`CreateTopic`)"
    - "[Enable a resource](./sns-ruby-example-enable-resource.rb) (`Topic.set_attributes`)"
    - "[Send a message](./sns-ruby-example-send-message.rb) (`Publish`)"
    - "[List subscriptions](./sns-ruby-example-show-subscriptions.rb) (`ListSubscriptions`)"
    - "[List topics](./sns-ruby-example-show-topics.rb) (`ListTopics`)"
  sqs:
    - "[Create a queue](./sqs-ruby-example-create-queue.rb) (`CreateQueue`)"
    - "[Delete a queue](./sqs-ruby-example-delete-queue.rb) (`DeleteQueue`)"
    - "[Enable a resource](./sqs-ruby-example-get-messages.rb) (`SetQueueAttributes`)"
    - "[Enable long polling](./sqs-ruby-example-enable-long-polling.rb) (`SetQueueAttributes`)"
    - "[Get messages](./sqs-ruby-example-get-messages-with-long-polling.rb) (`ReceiveMessage`)"
    - "[Get messages with long-polling](./sqs-ruby-example-long-polling.rb) (`QueuePoller.poll`)"
    - "[List queues](./sqs-ruby-example-show-queues.rb) (`ListQueues`)"
    - "[List subscriptions](./sqs-ruby-example-enable-resource.rb) (`ListSubscriptions`)"
    - "[Poll messages](./sqs-ruby-example-poll-messages.rb) (`QueuePoller.poll`)"
    - "[Redirect a dead-letter queue](./sqs-ruby-example-redirect-queue-deadletters.rb) (`SetQueueAttributes`)"
    - "[Send a batch message](./sqs-ruby-example-send-message-batch.rb) (`SendMessageBatch`)"
    - "[Send a message](./sqs-ruby-example-send-message.rb) (`SendMessage`)"
    - "[Send a message to a queue](./sqs-ruby-example-send-receive-messages.rb) (`SendMessage`)"
    - "[Set time messages not visible after being received](./sqs-ruby-example-message-visibility-timeout.rb) (`ChangeMessageVisibility`)"
    - "[Visibility timeout (example 1)](./sqs-ruby-example-visibility-timeout.rb) (`ChangeMessageVisibility`)"
    - "[Visibility timeout (example 2)](./sqs-ruby-example-visibility-timeout2.rb) (`ChangeMessageVisibility`)"
  workdocs:
    - "[List a user's documents](./wd_list_user_docs.rb) (`GetDocuments`)"
    - "[List users](./wd_list_users.rb) (`DescribeUsers`)"
scenarios:
  cloudwatch:
    - "[Manage alarms](./cw-ruby-example-alarm-basics.rb)"
    - "[Disable alarm actions](./cw-ruby-example-alarm-actions.rb)"
    - "[Add metrics](./cw-ruby-example-metrics-basics.rb)"
  dynamodb:
    - "[Get started using tables, items, and queries](scenario_getting_started_movies.rb)"
  ec2:
    - "[Create an internet gateway and attach it to a VPC](./ec2-ruby-example-attach-igw-vpc.rb)"
    - "[Manage addresses](./ec2-ruby-example-elastic-ips.rb)"
    - "[Manage key pairs](./ec2-ruby-example-key-pairs.rb)"
    - "[Manage security groups](./ec2-ruby-example-security-group.rb)"
    - "[Manage instances](./ec2-ruby-example-manage-instances.rb)"
  elastictranscoder:
    - "[Configure a new pipeline and job with SQS notifications](./create_job_status_notification.rb)"
  eventbridge:
    - "[Use Amazon EventBridge to write EC2 instance activity to Amazon SNS](./cw-ruby-example-send-events-ec2.rb)"
  iam:
    - "[Create a user and assume a role](scenario_create_user_assume_role.rb)"
  lambda:
    - "[Get started with functions](scenario_getting_started_functions.rb)"
  s3:
    - "[Create a presigned URL](object_presigned_url_upload.rb)"
    - "[Getting started with buckets and objects](scenario_getting_started.rb)"
  sqs:
    - "[Working with dead letter queues](./sqs-ruby-example-dead-letter-queue.rb)"
    - "[Working with messages](./sqs-ruby-example-send-receive-messages.rb)"
    - "[Working with queues](./sqs-ruby-example-using-queues.rb)"
